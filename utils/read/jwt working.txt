
//____________________________________ JWT WORKING _______________________________________________

//=========================
//JWT (npm i jsonwebtoken)
//=========================

-> create User model 
   //validate password & passwordConfirm
   //------bcryptjs----------------------
   //store password as hashed - encryption
   -> bcrypt algorithm - 1st salt then hash our password => storng protected password 
   -> protection from bruteForce attack (guessing password))
   -> adds a random string to a password so that 2 equal passwords do not generate the same hash
        npm i bcryptjs (bcrypt implementation for javascript)
        https://www.npmjs.com/package/bcryptjs
    salt = measure of how cpu intensive this operation will be ,default =10
    more salt value => more cpu intensive => better encryption
    but higer salt value => more time in hashing
    --------------------------------------------

//____________________
// JWT AUTHENTICATION
//____________________
Authentication : allowing user to signUp/signIn -JWT (Json Web Tokens)
-> create authController
   (userRoutes -> userController + authController)

   1)----- signup -----
     -> create new user
     -> generate JWT
     -> send jwt(token) + newUser in response

   2)----- signin -----
     checkIf user entered email & password
     check if user exists(findOne({email}) & password is correct (using instanceMethod))
        if not -> error response -> invalid username/password
     if everything is OK -> create unique token for login

   //_________________________________________
   //PROTECTED ROUTES (CheckAuthenticatedUser)
   //_________________________________________
   1)CheckAuthenticatedUser Middleware
   -> check if token is there -> req.header.authorization.split(' ')[1]
      if not -> errorResponse
  
   -> Check if token is valid (jwt.verify)
       - use {promisify} util module 
       - const decoded = await promisify(jwt.verify)(token, secret)
          decoded = {id: user._id , iat: issuedAt, exp: expiresIn} time = millisec
       if token is valid -> grant access
       else{
            if toknen is not valid -> invalid Signature (JsonWebTokenError) -errorHandler
            if token expired -> TokenExpiredError - errorHandler
       }

   ->Check if user still exists (OR delted at some point - jwt remains)
      - currentUser = await User.findById(decoded.id)
        if(!currentUser) => errorResponse

   -> Check if user changed the password after jwt was issued
         USER MODEL
       - add field passwordChangedAt: Date to User Model (optional)
         //JWTTimestamp = issuedAt (token) = decoded.iat - in millisec
         //ChangedTimeStamp = parseInt(this.passwordChangedAt.getTime()/1000) - give time in millisec
       - //use instance 'changedPasswordAfter(JWTTimestamp)' method on Model to compare (JWTTimeStamp & ChangedTimeStamp (both in millisec))

       if(this.passwordChangedAt){ 
           return JWTTimestamp < changedTimeStamp  //passwordChanged
       }
       return false;

       AUTH CONTROLLER
       if(currentUser.changedPasswordAfter(decoded.iat)){
          errorResponse ->PASSWORD CHANGED. LOGIN AGAIN TO CONTINUE
       }

   -> IF EVERYTHING WORKS FINE -> 
        set req.user = currentUser
        //call
        next()



//____________________
// JWT AUTHORIZATION 
//____________________
Authorization : alowing user to access specific route
//NOT ALL LoggedIn users will be able to perform the same action in our API
//restricting the logged in user from accesssing certain routes
Eg: delete tour -> only admin can do this, not even the loggedIn user


router.route('/:id').delete(checkAuthenticatedUser, restrictTo('admin','lead-guide'), deleteTour).

->USER MODEL
    //ROLE (role based authorization)
    role:{
        type:String,
        enum:['user', 'guide', 'lead-guide', 'admin'],
        //default_role
        default: 'user' 
    },


->AUTH CONTROLLER
//get roles for the currentUser  

exports.restrictTo = (...roles)=>{
    return (req,res,next)=>{
        //roles = array => ['admin','lead-guide'] , role = 'user' (Not Included)
        
        //FOR ALL USERS with No permission to access
        if(!roles.includes(req.user.role)){
            return next(new errorResponse('You do not have permission to perform this action',403));
        }

        next();
    }
}

//using middleware in routes
routes(checkAuthenticatedUser, restrictTo('admin', 'lead-guide'), routeController)



//===================
// PASSWORD RESET ->
//===================

//FORGOT PASSWORD - POST /api/v1/users/forgotPassword
-> get the user by email
-> Generate rANDOM RESET Token - cryypto module
-> Sending token to User email using Nodemailer
(token sent to user mail = plain text & token saved in Database = hashed)

//RESET PASSWORD - Patch /api/v1/users/resetPassword/:token
-> convert plain text  token send to user -> hashed form  -> token = {req.params.token}
-> Get User BASED on token + (tokenExpireDate > currentDate => token not expired)
     -> if(!user) -> error response
     -> if(user) -> 
          - SET NEW PASSWORD
          - REMOVE passwordResetToken,passwordExpiresIn from the database
-> UPDATE ChangedPasswordAt property (defined in User Model)
-> LogIn The user in -> SEND JWT




//=================
// update Password (checkAuthenticatedUser) : AuthRoutes
//=================
-> /api/v1/users/updateMyPassword
-> get current user.select('+ password field') 
-> check if ENTERED currentPassword matches with the password in Database -> correctPassword(enterPassword, userPassword) -> Instance Method
        if incorrect current password - error
        else UPDATE password & passwordConfirm from req.body (Newly Entered passwords) + user.save() //save document
-> LogIn The user in -> SEND JWT

//===============
// UPDATE User Data (checkAuthenticatedUser) :userRoutes
//===============
-> /api/v1/users/updateMe : patch
-> get user 
-> filter our the fields not to update
-> findByIdAndUpdate -> update the current user Data


//===============
// DELETE User (checkAuthenticatedUser) : userRoutes
//===============
-> /api/v1/users/deleteMe :delete
-> USER MODEL
   active:{
      type:boolean,
      default: true,
      select:false
   }


//findByIdAndUpdate(req.user.id, {active:false})
//query middleware(pre-find-hooks) -> to hide inactive users from result



//*****SENDING JWT via Cookie*****
//_____________
// COOKIE
//_____________
-> small piece of text that a server can send to client
-> browser store cookie & sends it back with all future req. on the same server
-> ** Without secure: true a browser would send those cookies along with any non-encrypted HTTP requests to your domain whether or not your domain listens to request or responds to it **  
-> send jwt as a cookie => browser can store it in more secure way

   //-----COOKIES--------
    const cookieOptions = {
        expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000), //90 days from currentDate
        httpOnly: true,
      //secure:true only added in production mode
    }

    if(process.env.NODE_ENV === 'production'){
        cookieOptions.secure = true
    }
    
    //SENDING Cookie
    res.cookie('jwt',token, cookieOptions);
    //----------------------

    // Remove password from output
      user.password = undefined;
