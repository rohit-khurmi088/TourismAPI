//====================
// POPULATE
//====================
/*creating referencing guides(user id) for tours*/
guides:[
{
	type: mongoose.Schema.ObjectId,
	ref: 'User'
}]

this will not give the referenced tour guides data 
only give their Object id

guides:[ id1,id2 ]

now we needd to populate(): actual related data 
to get referenced tour guide (using query)

----- getTour -----
//using populate() -> creates anew query which might affect our application
const tour = await Tour.findById(req.params.id).populate('guides')

//show only certain results
const tour = await Tour.findById(req.params.id).populate({
	path:'guides',
	select:'-__v, -passwordChangedAt'
});


//====================
// VIRTUAL POPULATE
//====================
// WORKS as parent refencing
// REVIEWS -> virtual Populate -> TOURS
//Keeping a reference of all child documents -> parent document without persisting that data to the database
//if we keep array of review id on tours - infinite long array + manual query teviews
//-> To access all the reviews under the given tour
//-> WITHOUT keeping arrays of reviews id on tours: use virtual properties

//Tour Id in Review model = tour
//(NOTE: _id in localModel = tour in foreignModel )
tourSchema.virtual('reviews',{
    ref: 'Review',          //reviewModel
    foreignField: 'tour',  //name of the field in the other model(Review) where the ref to current model(Tour) in stored
    localField: '_id'     //where the id is actually store in the current model
});
